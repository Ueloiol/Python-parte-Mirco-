# -*- coding: utf-8 -*-
"""Teoria.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RBfsvgetqLXI3aRNZIwYX75wBPLN5yrv
"""

#1- Cosa sono le condizioni e quali sono i blocchi condizionali che abbiamo visto   
#2- cosa sono gli iteratori e quali conosciamo?   
#3- cos'è un metodo e qual'è la sua similarità con le classi?  
#4- cos'è una classe? e come possiamo gestirla rispetto a ciò che contiene?  
#5- cos'è un oggetto e come e quando dobbiamo costruirne uno?  
#6- Cos'è l'astrazione?  
#7- quali sono le tre regole fondamentali? spiegale 
#8- Cos'è la tipizzazione e quale tipo ha python 
#9- quali sono i tipi basilari e quali sono i non basilari

#1- Cosa sono le condizioni e quali sono i blocchi condizionali che abbiamo visto  

"""
Le condizioni vengono utilizzate quando vogliamo eseguire un 
blocco di codice solo nel caso in cui una condizione sia vera o falsa.

I blocchi condizionali che abbiamo visto sono principalmente di due tipi:
(1) if-elif-else
(2) while

Spieghiamo meglio come operano con un esempio
"""
# ESEMPIO if-elif-else
x = 5
if x>2: #CONDIZIONE 1: x>2
  print('si è verificata la condizione 1')
elif x<2: #CONDIZIONE 2: x<2
  print('si è verificata la condizione 2') 
else: #CONDIZIONE 3: not(CONDIZIONE 1 or CONDIZIONE2)
  print('si è verificata la condizione 3')


# ESEMPIO while
y=7
while y<10:
  print('y è minore di 10')
  y+= 1

#NB col ciclo while è importante mettere la condizione y+=1 perchè
#permette di aggiornare il valore di y se no andrei avanti all'infinito

#2- cosa sono gli iteratori e quali conosciamo?
"""
Gli iteratori sono strutture logiche che ci permettono di effettuare più volte
una parte del codice.

Come iteratori abbiamo visto:
(1) ciclo for
(2) ciclo while 

Spieghiamo cosa fanno attraverso esempi
"""

for i in range(1,5):    # range(1,5) permette di iterare su [1,2,3,4]
  print(i)

# per il ciclo while possiamo considerare l'esempio della domanda 1

#3- cos'è un metodo e qual'è la sua similarità con le classi?  

"""
Un metodo è una funzione che contiene una porzione definita di codice. I metodi
possono essere utilizzati anche all'interno delle classi e quindi degli oggetti 
una volta che essi risultano istanziati correttamente.

Riporto un esempio di un metodo utilizzato all'esterno di una funzione
e di un metodo utilizzato attraverso un oggetto istanziato da una classe.
"""

# ESEMPIO di metodo utilizzato all'esterno di un oggetto
def funzione(x,y):
    z=x+y+5
    return z

w =funzione(27,3)
print(w)

# ESEMPIO di metodo utilizzato all'interno di un oggetto istanziato da una classe

class Supermercato:
  
  def ordine(self,x):
    print(x)

Market= Supermercato()

u = Market.ordine(7)
print(u)

#4- cos'è una classe? e come possiamo gestirla rispetto a ciò che contiene?
"""
Una classe è un modello utilizzato per l'istanziazione di un oggetto, da cui riceverà
metodi attributi e tipo. La classe è un'astrazione che può essere istanziata infinite volte.

Gli attributi e i metodi che contiene vengono ereditati dall'oggetto che viene istanziato
dalla relativa classe.
"""

#5- cos'è un oggetto e come e quando dobbiamo costruirne uno?  
"""
Un oggetto è il risultato dell'istanza di una classe e che coem tipo ha quello
della classe di origine.

Per costruire un oggetto si segue la seguente sintassi NomeOggetto = NomeClasse().
E' utile costruire un oggetto quando vogliamo utilizzare metodi e attributi
della classe di origine, a seconda del campo di applicazione.

"""

class GrandeClasse:
    nome= 'ciao'

NuovoOggetto = GrandeClasse()

#6- Cos'è l'astrazione?  
"""
il concetto di astrazione divide l'azione dall'esecuzione
"""

#7- quali sono le tre regole fondamentali? spiegale
"""
Un linguaggio di programmazione è definito ad oggetti quando permette di implementare le 3 regole fondamentali, ovvero:
(1) INCAPSULAMENTO: essa rappresenta la capacità del codice di nascondere parti di se stesso.
(2) POLIMORFISMO: essa rappresenta la capacità del codice di modificare la propria forma.
(3) EREDITARIETA': essa rappresenta la capacità del codice di creare classi a partire da altre già definite e quiundi di
                   permette ad una classe (clase figlio) di ereditare prorietà di un'altra (classe padre).
"""

#8- Cos'è la tipizzazione e quale tipo ha python 
"""
La tipizzazione è il processo tramite il quale viene assegnato il tipo ad una variabile.
Si parla di tipizzazione forte quando è necessario esplicitare il tipo di variabile
prima di assegnare un valore a quella variabile.
Si parla di tipizzazione debole quando è possibile assegnare un valore ad una variabile
senza specificarne il tipo (Python funziona tramite tipizzazione debole).
"""

#9- quali sono i tipi basilari e quali sono i non basilari 
"""
I tipi basilari sono:
(1) Numeri interi (INT)
(2) Numeri a virgola mobile (FLOAT)
(3) Numeri a virgola mobile a precisione doppia (DOUBLE)
(4) Booleani (BOOL)
(5) Stringhe (STRING) (con origine tipo Carattere (CHAR))

Essi possono essere raggruppati in 3 ulteriori macrogruppi:
(A) NUMERICI (INT, FLOAT, DOUBLE)
(B) NON NUMERICI (STRING, con origine CHAR)
(C) BOOLEANI

I tipi non basilari visti sono:
(1) Liste
(2) Tuple
(3) Dizioanri
(4) Insiemi
"""